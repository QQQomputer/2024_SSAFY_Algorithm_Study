package BOJ19238_G2_스타트택시;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Queue;
/*
	#start
	
	#end
	
	#concepion
	
	
	#review
	
	
	
*/
class JH {
    static int ans,N,M,oil;
    static boolean [][] isWall;
    static boolean [][] isPassenger;
    static int [][][] board;
    static boolean [][][] checked;
    static Queue<int[]> [] MQ;
    static int [][] goal;
    static int curY,curX, curP;
	static int [] dy = {-1,0,0,1};
	static int [] dx = {0,-1,1,0};
    static boolean isFail;
	public static void main(String[] args) throws IOException {
        N=readInt();
        M=readInt();
        oil=readInt();
        isWall = new boolean[N][N];
        isPassenger = new boolean[N][N];
        board = new int[M][N][N];
        checked = new boolean[M][N][N];
        goal = new int[M][4];
        MQ = new ArrayDeque[M];
        for(int i=0;i<M ;i++ )MQ[i] = new ArrayDeque<>();
        
        for (int i=0;i<N ;i++ ) {
            for (int j=0;j<N ;j++ ) {
                if(readInt()==1)isWall[i][j]=true;
            }
        }
        
        curY = readInt();
        curX = readInt();
        Queue<int[]> org = new ArrayDeque<>();
        for (int i=0;i<M ;i++ ) {
            for (int j=0;j<4 ;j++ ) {
                goal[i][j]=readInt()-1;
            }
            isPassenger[goal[i][0]][goal[i][1]]=true;
            org.offer(new int[]{goal[i][0],goal[i][1],goal[i][0],goal[i][1]});
        }

        //손님 to 목적지
        for (int i=0;i<M && !isFail;i++) {
            int [] n = goal[i];
            Queue<int[]> q = MQ[i];
            boolean [][] c = checked[i];
            int [][] b = board[i];
            c[n[0]][n[1]]=true;
            q.offer(new int[]{n[0],n[1]});
            bfs( q, c, b, n[2], n[3] );
            ans+=b[n[2]][n[3]];
            //if(ans>oil)isFail=true;
        }

        //택시(도착지점) to 손님        
        for (int i=0;i<M && !isFail;i++) {
            Queue<int[]> qq = new ArrayDeque<>();
            int size = qq.size();
            for (int i = 0;i<size;i++){
                int [] nArr = org.poll();
                if(nArr[0]==curY && nArr[1]==curX)continue;
                org.offer(nArr);
                qq.offer(nArr);
            }
            boolean [][] cc = new boolean[N][N];
            int [][] bb = new int[N][N];
            cc[curY][curX]=true;
            //손님에게로
            int res = bfs1(qq, cc, bb, curY, curX);

            //목적지로
            
        }
        

        
        System.out.println(isFail?-1:ans);
	}
    //손님 to 목적지
    static void bfs(Queue<int[]> q, boolean [][] c, int [][] b, int ey, int ex){
        while(!q.isEmpty()){
            int [] info = q.poll();
            int y = info[0];
            int x = info[1];

            for (int i=0;i<4;i++) {
                int yy = y+dy[i];
                int xx = x+dx[i];
                if(check(yy,xx) || isWall[yy][xx] || c[yy][xx])continue;
                c[yy][xx]=true;
                b[yy][xx]=b[y][x]+1;
                q.offer(new int[]{yy,xx});
                if(yy==ey && xx==ex)return;
                
            }
            
        }
        isFail = true;
        return;
    }
    //택시 to 손님
    static int bfs1(Queue<int[]> q, boolean [][] c, int [][] b, int ey, int ex){

        while(!qq.isEmpty()){
            int [] info = qq.poll();
            int y = info[0];
            int x = info[1];

            for (int i=0;i<4;i++) {
                int yy = y+dy[i];
                int xx = x+dx[i];
                if(check(yy,xx) || isWall[yy][xx] || cc[yy][xx])continue;
                cc[yy][xx]=true;
                bb[yy][xx]=bb[y][x]+1;
                qq.offer(new int[]{yy,xx,info[2],info[3]);
                if(curY==yy&&curX==xx){
                    isPassenger[info[2]][info[3]]=false;
                    curY=info[2];
                    curX=info[3];
                    return bb[yy][xx];
                }
            }
        }
        isFail = true;
        return 0;
    }
    public static int readInt() throws IOException {
        int n = 0;
        while (true) {
            int input = System.in.read();
            if (input > 32)
                n = (n << 3) + (n << 1) + (input & 15);
            else
                return n;
        }
    }
    static boolean check(int y, int x) {
		return y<0 || y>=N || x<0 || x>=N;
	}
}
